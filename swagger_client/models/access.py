# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.access_fields_map import AccessFieldsMap  # noqa: F401,E501


class Access(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'provider_id': 'str',
        'access_fields': 'AccessFieldsMap',
        'validation_state': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'provider_id': 'providerId',
        'access_fields': 'accessFields',
        'validation_state': 'validationState',
        'type': 'type'
    }

    discriminator_value_class_map = {
        'BankAccess': 'BankAccess'
    }

    def __init__(self, id=None, provider_id=None, access_fields=None, validation_state=None, type=None):  # noqa: E501
        """Access - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._provider_id = None
        self._access_fields = None
        self._validation_state = None
        self._type = None
        self.discriminator = 'type'

        if id is not None:
            self.id = id
        self.provider_id = provider_id
        self.access_fields = access_fields
        if validation_state is not None:
            self.validation_state = validation_state
        self.type = type

    @property
    def id(self):
        """Gets the id of this Access.  # noqa: E501

        Internal ID of this access (generated value)  # noqa: E501

        :return: The id of this Access.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Access.

        Internal ID of this access (generated value)  # noqa: E501

        :param id: The id of this Access.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def provider_id(self):
        """Gets the provider_id of this Access.  # noqa: E501

        Identifier of the provider to which this access belongs  # noqa: E501

        :return: The provider_id of this Access.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Access.

        Identifier of the provider to which this access belongs  # noqa: E501

        :param provider_id: The provider_id of this Access.  # noqa: E501
        :type: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def access_fields(self):
        """Gets the access_fields of this Access.  # noqa: E501

        Authentication data for the given provider as map of InputFieldId to String (e.g., `{\"USERNAME\", \"yourName\"}`)  The fields necessary for the access are determined by the   InputField descriptions of the related provider.  # noqa: E501

        :return: The access_fields of this Access.  # noqa: E501
        :rtype: AccessFieldsMap
        """
        return self._access_fields

    @access_fields.setter
    def access_fields(self, access_fields):
        """Sets the access_fields of this Access.

        Authentication data for the given provider as map of InputFieldId to String (e.g., `{\"USERNAME\", \"yourName\"}`)  The fields necessary for the access are determined by the   InputField descriptions of the related provider.  # noqa: E501

        :param access_fields: The access_fields of this Access.  # noqa: E501
        :type: AccessFieldsMap
        """
        if access_fields is None:
            raise ValueError("Invalid value for `access_fields`, must not be `None`")  # noqa: E501

        self._access_fields = access_fields

    @property
    def validation_state(self):
        """Gets the validation_state of this Access.  # noqa: E501

        The state reflects the validity of the access credentials. The state can change after communicating with the provider.  It can be OK (access credentials are valid); `ACCESS_LOCKED` (access is locked: This can happen when, for example, someone tried to login to your account by  using an incorrect PIN too many times or if your account was used for illegal purposes — automatic refresh will be disabled); or `ACCESS_WRONG` (access wrong: Saved  credentials are incorrect and no communication with the provider is possible — automatic refresh will be disabled)  # noqa: E501

        :return: The validation_state of this Access.  # noqa: E501
        :rtype: str
        """
        return self._validation_state

    @validation_state.setter
    def validation_state(self, validation_state):
        """Sets the validation_state of this Access.

        The state reflects the validity of the access credentials. The state can change after communicating with the provider.  It can be OK (access credentials are valid); `ACCESS_LOCKED` (access is locked: This can happen when, for example, someone tried to login to your account by  using an incorrect PIN too many times or if your account was used for illegal purposes — automatic refresh will be disabled); or `ACCESS_WRONG` (access wrong: Saved  credentials are incorrect and no communication with the provider is possible — automatic refresh will be disabled)  # noqa: E501

        :param validation_state: The validation_state of this Access.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "ACCESS_LOCKED", "ACCESS_WRONG"]  # noqa: E501
        if validation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_state` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_state, allowed_values)
            )

        self._validation_state = validation_state

    @property
    def type(self):
        """Gets the type of this Access.  # noqa: E501

        Discriminator for subtypes. At the moment only `BankAccess` is supported.  # noqa: E501

        :return: The type of this Access.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Access.

        Discriminator for subtypes. At the moment only `BankAccess` is supported.  # noqa: E501

        :param type: The type of this Access.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Access):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
