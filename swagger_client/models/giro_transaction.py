# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.additional_information import AdditionalInformation  # noqa: F401,E501
from swagger_client.models.amount import Amount  # noqa: F401,E501
from swagger_client.models.transaction import Transaction  # noqa: F401,E501


class GiroTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'Amount',
        'booking_date': 'datetime',
        'value_date': 'datetime',
        'creditor': 'str',
        'creditor_bank_code': 'str',
        'creditor_account_number': 'str',
        'debtor': 'str',
        'debtor_bank_code': 'str',
        'debtor_account_number': 'str',
        'purpose': 'str',
        'clean_purpose': 'str',
        'prebooked': 'bool',
        'booking_key': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'booking_date': 'bookingDate',
        'value_date': 'valueDate',
        'creditor': 'creditor',
        'creditor_bank_code': 'creditorBankCode',
        'creditor_account_number': 'creditorAccountNumber',
        'debtor': 'debtor',
        'debtor_bank_code': 'debtorBankCode',
        'debtor_account_number': 'debtorAccountNumber',
        'purpose': 'purpose',
        'clean_purpose': 'cleanPurpose',
        'prebooked': 'prebooked',
        'booking_key': 'bookingKey'
    }

    def __init__(self, amount=None, booking_date=None, value_date=None, creditor=None, creditor_bank_code=None, creditor_account_number=None, debtor=None, debtor_bank_code=None, debtor_account_number=None, purpose=None, clean_purpose=None, prebooked=None, booking_key=None):  # noqa: E501
        """GiroTransaction - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._booking_date = None
        self._value_date = None
        self._creditor = None
        self._creditor_bank_code = None
        self._creditor_account_number = None
        self._debtor = None
        self._debtor_bank_code = None
        self._debtor_account_number = None
        self._purpose = None
        self._clean_purpose = None
        self._prebooked = None
        self._booking_key = None
        self.discriminator = None

        self.amount = amount
        self.booking_date = booking_date
        self.value_date = value_date
        self.creditor = creditor
        if creditor_bank_code is not None:
            self.creditor_bank_code = creditor_bank_code
        if creditor_account_number is not None:
            self.creditor_account_number = creditor_account_number
        self.debtor = debtor
        if debtor_bank_code is not None:
            self.debtor_bank_code = debtor_bank_code
        if debtor_account_number is not None:
            self.debtor_account_number = debtor_account_number
        self.purpose = purpose
        if clean_purpose is not None:
            self.clean_purpose = clean_purpose
        self.prebooked = prebooked
        self.booking_key = booking_key

    @property
    def amount(self):
        """Gets the amount of this GiroTransaction.  # noqa: E501

        Amount value  # noqa: E501

        :return: The amount of this GiroTransaction.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GiroTransaction.

        Amount value  # noqa: E501

        :param amount: The amount of this GiroTransaction.  # noqa: E501
        :type: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def booking_date(self):
        """Gets the booking_date of this GiroTransaction.  # noqa: E501

        Booking date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")  # noqa: E501

        :return: The booking_date of this GiroTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this GiroTransaction.

        Booking date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")  # noqa: E501

        :param booking_date: The booking_date of this GiroTransaction.  # noqa: E501
        :type: datetime
        """
        if booking_date is None:
            raise ValueError("Invalid value for `booking_date`, must not be `None`")  # noqa: E501

        self._booking_date = booking_date

    @property
    def value_date(self):
        """Gets the value_date of this GiroTransaction.  # noqa: E501

        Value Date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")  # noqa: E501

        :return: The value_date of this GiroTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this GiroTransaction.

        Value Date (ISO 8601: \"yyyy-MM-dd'T'HH:mm:ssX\")  # noqa: E501

        :param value_date: The value_date of this GiroTransaction.  # noqa: E501
        :type: datetime
        """
        if value_date is None:
            raise ValueError("Invalid value for `value_date`, must not be `None`")  # noqa: E501

        self._value_date = value_date

    @property
    def creditor(self):
        """Gets the creditor of this GiroTransaction.  # noqa: E501

        Creditor's name  # noqa: E501

        :return: The creditor of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._creditor

    @creditor.setter
    def creditor(self, creditor):
        """Sets the creditor of this GiroTransaction.

        Creditor's name  # noqa: E501

        :param creditor: The creditor of this GiroTransaction.  # noqa: E501
        :type: str
        """
        if creditor is None:
            raise ValueError("Invalid value for `creditor`, must not be `None`")  # noqa: E501

        self._creditor = creditor

    @property
    def creditor_bank_code(self):
        """Gets the creditor_bank_code of this GiroTransaction.  # noqa: E501

        Creditor's bank code or BIC  # noqa: E501

        :return: The creditor_bank_code of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._creditor_bank_code

    @creditor_bank_code.setter
    def creditor_bank_code(self, creditor_bank_code):
        """Sets the creditor_bank_code of this GiroTransaction.

        Creditor's bank code or BIC  # noqa: E501

        :param creditor_bank_code: The creditor_bank_code of this GiroTransaction.  # noqa: E501
        :type: str
        """

        self._creditor_bank_code = creditor_bank_code

    @property
    def creditor_account_number(self):
        """Gets the creditor_account_number of this GiroTransaction.  # noqa: E501

        Creditor's account number or IBAN  # noqa: E501

        :return: The creditor_account_number of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._creditor_account_number

    @creditor_account_number.setter
    def creditor_account_number(self, creditor_account_number):
        """Sets the creditor_account_number of this GiroTransaction.

        Creditor's account number or IBAN  # noqa: E501

        :param creditor_account_number: The creditor_account_number of this GiroTransaction.  # noqa: E501
        :type: str
        """

        self._creditor_account_number = creditor_account_number

    @property
    def debtor(self):
        """Gets the debtor of this GiroTransaction.  # noqa: E501

        Debtor's name  # noqa: E501

        :return: The debtor of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._debtor

    @debtor.setter
    def debtor(self, debtor):
        """Sets the debtor of this GiroTransaction.

        Debtor's name  # noqa: E501

        :param debtor: The debtor of this GiroTransaction.  # noqa: E501
        :type: str
        """
        if debtor is None:
            raise ValueError("Invalid value for `debtor`, must not be `None`")  # noqa: E501

        self._debtor = debtor

    @property
    def debtor_bank_code(self):
        """Gets the debtor_bank_code of this GiroTransaction.  # noqa: E501

        Debtor's bank code or BIC  # noqa: E501

        :return: The debtor_bank_code of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._debtor_bank_code

    @debtor_bank_code.setter
    def debtor_bank_code(self, debtor_bank_code):
        """Sets the debtor_bank_code of this GiroTransaction.

        Debtor's bank code or BIC  # noqa: E501

        :param debtor_bank_code: The debtor_bank_code of this GiroTransaction.  # noqa: E501
        :type: str
        """

        self._debtor_bank_code = debtor_bank_code

    @property
    def debtor_account_number(self):
        """Gets the debtor_account_number of this GiroTransaction.  # noqa: E501

        Debtor's account number or IBAN  # noqa: E501

        :return: The debtor_account_number of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._debtor_account_number

    @debtor_account_number.setter
    def debtor_account_number(self, debtor_account_number):
        """Sets the debtor_account_number of this GiroTransaction.

        Debtor's account number or IBAN  # noqa: E501

        :param debtor_account_number: The debtor_account_number of this GiroTransaction.  # noqa: E501
        :type: str
        """

        self._debtor_account_number = debtor_account_number

    @property
    def purpose(self):
        """Gets the purpose of this GiroTransaction.  # noqa: E501

        Purpose (as given by the provider)  # noqa: E501

        :return: The purpose of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this GiroTransaction.

        Purpose (as given by the provider)  # noqa: E501

        :param purpose: The purpose of this GiroTransaction.  # noqa: E501
        :type: str
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")  # noqa: E501

        self._purpose = purpose

    @property
    def clean_purpose(self):
        """Gets the clean_purpose of this GiroTransaction.  # noqa: E501

        Cleaned purpose. Some SEPA information is filtered out (e.g., \"KREF+-1434947533-2...\")  # noqa: E501

        :return: The clean_purpose of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._clean_purpose

    @clean_purpose.setter
    def clean_purpose(self, clean_purpose):
        """Sets the clean_purpose of this GiroTransaction.

        Cleaned purpose. Some SEPA information is filtered out (e.g., \"KREF+-1434947533-2...\")  # noqa: E501

        :param clean_purpose: The clean_purpose of this GiroTransaction.  # noqa: E501
        :type: str
        """

        self._clean_purpose = clean_purpose

    @property
    def prebooked(self):
        """Gets the prebooked of this GiroTransaction.  # noqa: E501

        Flag to identify if the transaction is marked as pre-booked  # noqa: E501

        :return: The prebooked of this GiroTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._prebooked

    @prebooked.setter
    def prebooked(self, prebooked):
        """Sets the prebooked of this GiroTransaction.

        Flag to identify if the transaction is marked as pre-booked  # noqa: E501

        :param prebooked: The prebooked of this GiroTransaction.  # noqa: E501
        :type: bool
        """
        if prebooked is None:
            raise ValueError("Invalid value for `prebooked`, must not be `None`")  # noqa: E501

        self._prebooked = prebooked

    @property
    def booking_key(self):
        """Gets the booking_key of this GiroTransaction.  # noqa: E501

        Booking key for transaction  # noqa: E501

        :return: The booking_key of this GiroTransaction.  # noqa: E501
        :rtype: str
        """
        return self._booking_key

    @booking_key.setter
    def booking_key(self, booking_key):
        """Sets the booking_key of this GiroTransaction.

        Booking key for transaction  # noqa: E501

        :param booking_key: The booking_key of this GiroTransaction.  # noqa: E501
        :type: str
        """
        if booking_key is None:
            raise ValueError("Invalid value for `booking_key`, must not be `None`")  # noqa: E501

        self._booking_key = booking_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiroTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
