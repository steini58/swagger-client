# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.account import Account  # noqa: F401,E501
from swagger_client.models.balance import Balance  # noqa: F401,E501


class BankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'bank_code_number': 'str',
        'bic': 'str',
        'iban': 'str',
        'currency': 'str',
        'balance': 'Balance'
    }

    attribute_map = {
        'number': 'number',
        'bank_code_number': 'bankCodeNumber',
        'bic': 'bic',
        'iban': 'iban',
        'currency': 'currency',
        'balance': 'balance'
    }

    def __init__(self, number=None, bank_code_number=None, bic=None, iban=None, currency=None, balance=None):  # noqa: E501
        """BankAccount - a model defined in Swagger"""  # noqa: E501

        self._number = None
        self._bank_code_number = None
        self._bic = None
        self._iban = None
        self._currency = None
        self._balance = None
        self.discriminator = None

        self.number = number
        self.bank_code_number = bank_code_number
        self.bic = bic
        self.iban = iban
        self.currency = currency
        self.balance = balance

    @property
    def number(self):
        """Gets the number of this BankAccount.  # noqa: E501

        Account number (national)  # noqa: E501

        :return: The number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this BankAccount.

        Account number (national)  # noqa: E501

        :param number: The number of this BankAccount.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def bank_code_number(self):
        """Gets the bank_code_number of this BankAccount.  # noqa: E501

        Bank code number (BLZ, national, 8 digits)  # noqa: E501

        :return: The bank_code_number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_code_number

    @bank_code_number.setter
    def bank_code_number(self, bank_code_number):
        """Sets the bank_code_number of this BankAccount.

        Bank code number (BLZ, national, 8 digits)  # noqa: E501

        :param bank_code_number: The bank_code_number of this BankAccount.  # noqa: E501
        :type: str
        """
        if bank_code_number is None:
            raise ValueError("Invalid value for `bank_code_number`, must not be `None`")  # noqa: E501
        if bank_code_number is not None and len(bank_code_number) > 8:
            raise ValueError("Invalid value for `bank_code_number`, length must be less than or equal to `8`")  # noqa: E501
        if bank_code_number is not None and len(bank_code_number) < 8:
            raise ValueError("Invalid value for `bank_code_number`, length must be greater than or equal to `8`")  # noqa: E501

        self._bank_code_number = bank_code_number

    @property
    def bic(self):
        """Gets the bic of this BankAccount.  # noqa: E501

        Business Identifier Code (BIC; ISO 9362)  # noqa: E501

        :return: The bic of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankAccount.

        Business Identifier Code (BIC; ISO 9362)  # noqa: E501

        :param bic: The bic of this BankAccount.  # noqa: E501
        :type: str
        """
        if bic is None:
            raise ValueError("Invalid value for `bic`, must not be `None`")  # noqa: E501
        if bic is not None and len(bic) > 11:
            raise ValueError("Invalid value for `bic`, length must be less than or equal to `11`")  # noqa: E501
        if bic is not None and len(bic) < 11:
            raise ValueError("Invalid value for `bic`, length must be greater than or equal to `11`")  # noqa: E501

        self._bic = bic

    @property
    def iban(self):
        """Gets the iban of this BankAccount.  # noqa: E501

        International Bank Account Number (IBAN; ISO 13616-1)  # noqa: E501

        :return: The iban of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccount.

        International Bank Account Number (IBAN; ISO 13616-1)  # noqa: E501

        :param iban: The iban of this BankAccount.  # noqa: E501
        :type: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")  # noqa: E501

        self._iban = iban

    @property
    def currency(self):
        """Gets the currency of this BankAccount.  # noqa: E501

        Account currency (ISO 4217) (e.g., \"EUR\")  # noqa: E501

        :return: The currency of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankAccount.

        Account currency (ISO 4217) (e.g., \"EUR\")  # noqa: E501

        :param currency: The currency of this BankAccount.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def balance(self):
        """Gets the balance of this BankAccount.  # noqa: E501

        Current balance. This value is set whenever the account is refreshed.  # noqa: E501

        :return: The balance of this BankAccount.  # noqa: E501
        :rtype: Balance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BankAccount.

        Current balance. This value is set whenever the account is refreshed.  # noqa: E501

        :param balance: The balance of this BankAccount.  # noqa: E501
        :type: Balance
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
