# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InputFieldDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'str',
        'masked': 'bool',
        'format': 'str',
        'length_min': 'int',
        'length_max': 'int'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'masked': 'masked',
        'format': 'format',
        'length_min': 'lengthMin',
        'length_max': 'lengthMax'
    }

    def __init__(self, id=None, label=None, masked=None, format=None, length_min=None, length_max=None):  # noqa: E501
        """InputFieldDescription - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._label = None
        self._masked = None
        self._format = None
        self._length_min = None
        self._length_max = None
        self.discriminator = None

        self.id = id
        self.label = label
        self.masked = masked
        self.format = format
        if length_min is not None:
            self.length_min = length_min
        if length_max is not None:
            self.length_max = length_max

    @property
    def id(self):
        """Gets the id of this InputFieldDescription.  # noqa: E501

        Internal id for this field description  # noqa: E501

        :return: The id of this InputFieldDescription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InputFieldDescription.

        Internal id for this field description  # noqa: E501

        :param id: The id of this InputFieldDescription.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        allowed_values = ["USERNAME", "CUSTOMERNUMBER", "PIN", "TAN"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def label(self):
        """Gets the label of this InputFieldDescription.  # noqa: E501

        Label for this field description (e.g. 'PIN', 'Login name', 'Customer No.')  # noqa: E501

        :return: The label of this InputFieldDescription.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InputFieldDescription.

        Label for this field description (e.g. 'PIN', 'Login name', 'Customer No.')  # noqa: E501

        :param label: The label of this InputFieldDescription.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def masked(self):
        """Gets the masked of this InputFieldDescription.  # noqa: E501

        Flag that indicates whether the given field value must be masked when entered on client side, respectively encrypted when persisted  on server side  # noqa: E501

        :return: The masked of this InputFieldDescription.  # noqa: E501
        :rtype: bool
        """
        return self._masked

    @masked.setter
    def masked(self, masked):
        """Sets the masked of this InputFieldDescription.

        Flag that indicates whether the given field value must be masked when entered on client side, respectively encrypted when persisted  on server side  # noqa: E501

        :param masked: The masked of this InputFieldDescription.  # noqa: E501
        :type: bool
        """
        if masked is None:
            raise ValueError("Invalid value for `masked`, must not be `None`")  # noqa: E501

        self._masked = masked

    @property
    def format(self):
        """Gets the format of this InputFieldDescription.  # noqa: E501

        Format of field value  Can be DEFINITELYNUMERIC (Format is definitely numeric), DEFINITELYALPHANUMERIC (Format is definitely alphanumeric),  PROBABLYALPHANUMERIC (Format is probably alphanumeric; numeric is unlikely but possible), PROBABLYNUMERIC (Format is probably  numeric; alphanumeric is unlikely but possible) or UNSPECIFIED (Default. No hint available)  # noqa: E501

        :return: The format of this InputFieldDescription.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this InputFieldDescription.

        Format of field value  Can be DEFINITELYNUMERIC (Format is definitely numeric), DEFINITELYALPHANUMERIC (Format is definitely alphanumeric),  PROBABLYALPHANUMERIC (Format is probably alphanumeric; numeric is unlikely but possible), PROBABLYNUMERIC (Format is probably  numeric; alphanumeric is unlikely but possible) or UNSPECIFIED (Default. No hint available)  # noqa: E501

        :param format: The format of this InputFieldDescription.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["UNSPECIFIED", "PROBABLYNUMERIC", "DEFINITELYNUMERIC", "PROBABLYALPHANUMERIC", "DEFINITELYALPHANUMERIC"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def length_min(self):
        """Gets the length_min of this InputFieldDescription.  # noqa: E501

        Minimum length of field value (0 = no limit)  # noqa: E501

        :return: The length_min of this InputFieldDescription.  # noqa: E501
        :rtype: int
        """
        return self._length_min

    @length_min.setter
    def length_min(self, length_min):
        """Sets the length_min of this InputFieldDescription.

        Minimum length of field value (0 = no limit)  # noqa: E501

        :param length_min: The length_min of this InputFieldDescription.  # noqa: E501
        :type: int
        """

        self._length_min = length_min

    @property
    def length_max(self):
        """Gets the length_max of this InputFieldDescription.  # noqa: E501

        Maximum length of field value (0 = no limit)  # noqa: E501

        :return: The length_max of this InputFieldDescription.  # noqa: E501
        :rtype: int
        """
        return self._length_max

    @length_max.setter
    def length_max(self, length_max):
        """Sets the length_max of this InputFieldDescription.

        Maximum length of field value (0 = no limit)  # noqa: E501

        :param length_max: The length_max of this InputFieldDescription.  # noqa: E501
        :type: int
        """

        self._length_max = length_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InputFieldDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
