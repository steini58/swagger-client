# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.additional_information import AdditionalInformation  # noqa: F401,E501


class Category(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent': 'str',
        'name': 'str',
        'origin_id': 'str',
        'origin': 'str'
    }

    attribute_map = {
        'parent': 'parent',
        'name': 'name',
        'origin_id': 'originId',
        'origin': 'origin'
    }

    def __init__(self, parent=None, name=None, origin_id=None, origin=None):  # noqa: E501
        """Category - a model defined in Swagger"""  # noqa: E501

        self._parent = None
        self._name = None
        self._origin_id = None
        self._origin = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        self.name = name
        if origin_id is not None:
            self.origin_id = origin_id
        self.origin = origin

    @property
    def parent(self):
        """Gets the parent of this Category.  # noqa: E501

        Parent category id in UUID form  # noqa: E501

        :return: The parent of this Category.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Category.

        Parent category id in UUID form  # noqa: E501

        :param parent: The parent of this Category.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def name(self):
        """Gets the name of this Category.  # noqa: E501

        Category name  # noqa: E501

        :return: The name of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.

        Category name  # noqa: E501

        :param name: The name of this Category.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def origin_id(self):
        """Gets the origin_id of this Category.  # noqa: E501

        Origin id i.e. the id within the origin id service  # noqa: E501

        :return: The origin_id of this Category.  # noqa: E501
        :rtype: str
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id):
        """Sets the origin_id of this Category.

        Origin id i.e. the id within the origin id service  # noqa: E501

        :param origin_id: The origin_id of this Category.  # noqa: E501
        :type: str
        """

        self._origin_id = origin_id

    @property
    def origin(self):
        """Gets the origin of this Category.  # noqa: E501

        Origin name  # noqa: E501

        :return: The origin of this Category.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Category.

        Origin name  # noqa: E501

        :param origin: The origin of this Category.  # noqa: E501
        :type: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
