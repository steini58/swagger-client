# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JwkJwkPublicKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kty': 'str',
        'alg': 'str',
        'n': 'str',
        'e': 'str',
        'kid': 'str'
    }

    attribute_map = {
        'kty': 'kty',
        'alg': 'alg',
        'n': 'n',
        'e': 'e',
        'kid': 'kid'
    }

    def __init__(self, kty=None, alg=None, n=None, e=None, kid=None):  # noqa: E501
        """JwkJwkPublicKey - a model defined in Swagger"""  # noqa: E501

        self._kty = None
        self._alg = None
        self._n = None
        self._e = None
        self._kid = None
        self.discriminator = None

        if kty is not None:
            self.kty = kty
        if alg is not None:
            self.alg = alg
        if n is not None:
            self.n = n
        if e is not None:
            self.e = e
        if kid is not None:
            self.kid = kid

    @property
    def kty(self):
        """Gets the kty of this JwkJwkPublicKey.  # noqa: E501

        Key type, in this context RSA only  # noqa: E501

        :return: The kty of this JwkJwkPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this JwkJwkPublicKey.

        Key type, in this context RSA only  # noqa: E501

        :param kty: The kty of this JwkJwkPublicKey.  # noqa: E501
        :type: str
        """

        self._kty = kty

    @property
    def alg(self):
        """Gets the alg of this JwkJwkPublicKey.  # noqa: E501

        Algorithm, in this context RSA-OAEP (RSA_2048_SHA1) only.  # noqa: E501

        :return: The alg of this JwkJwkPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this JwkJwkPublicKey.

        Algorithm, in this context RSA-OAEP (RSA_2048_SHA1) only.  # noqa: E501

        :param alg: The alg of this JwkJwkPublicKey.  # noqa: E501
        :type: str
        """

        self._alg = alg

    @property
    def n(self):
        """Gets the n of this JwkJwkPublicKey.  # noqa: E501

        Public key modulus BigInteger as base64url encoded  # noqa: E501

        :return: The n of this JwkJwkPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this JwkJwkPublicKey.

        Public key modulus BigInteger as base64url encoded  # noqa: E501

        :param n: The n of this JwkJwkPublicKey.  # noqa: E501
        :type: str
        """

        self._n = n

    @property
    def e(self):
        """Gets the e of this JwkJwkPublicKey.  # noqa: E501

        Public key exponent BigInteger as base64url encoded  # noqa: E501

        :return: The e of this JwkJwkPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._e

    @e.setter
    def e(self, e):
        """Sets the e of this JwkJwkPublicKey.

        Public key exponent BigInteger as base64url encoded  # noqa: E501

        :param e: The e of this JwkJwkPublicKey.  # noqa: E501
        :type: str
        """

        self._e = e

    @property
    def kid(self):
        """Gets the kid of this JwkJwkPublicKey.  # noqa: E501

        Public key ID, i.e. a random UUID per key  # noqa: E501

        :return: The kid of this JwkJwkPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this JwkJwkPublicKey.

        Public key ID, i.e. a random UUID per key  # noqa: E501

        :param kid: The kid of this JwkJwkPublicKey.  # noqa: E501
        :type: str
        """

        self._kid = kid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JwkJwkPublicKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
