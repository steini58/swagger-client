# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.access_description import AccessDescription  # noqa: F401,E501


class Provider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'location': 'str',
        'access_description': 'AccessDescription',
        'supported': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'location': 'location',
        'access_description': 'accessDescription',
        'supported': 'supported',
        'type': 'type'
    }

    discriminator_value_class_map = {
        'BankProvider': 'BankProvider'
    }

    def __init__(self, id=None, name=None, location=None, access_description=None, supported=None, type=None):  # noqa: E501
        """Provider - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._location = None
        self._access_description = None
        self._supported = None
        self._type = None
        self.discriminator = 'type'

        self.id = id
        self.name = name
        self.location = location
        if access_description is not None:
            self.access_description = access_description
        self.supported = supported
        self.type = type

    @property
    def id(self):
        """Gets the id of this Provider.  # noqa: E501

        UUID of this provider. A constant to identify provider even when  e.g. their bank code changes (provided type is BankProvider)  # noqa: E501

        :return: The id of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Provider.

        UUID of this provider. A constant to identify provider even when  e.g. their bank code changes (provided type is BankProvider)  # noqa: E501

        :param id: The id of this Provider.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Provider.  # noqa: E501

        Name of this provider e.g. \"Hamburger Bank\"  # noqa: E501

        :return: The name of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Provider.

        Name of this provider e.g. \"Hamburger Bank\"  # noqa: E501

        :param name: The name of this Provider.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this Provider.  # noqa: E501

        Location of this provider e.g. \"Hamburg\"  # noqa: E501

        :return: The location of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Provider.

        Location of this provider e.g. \"Hamburg\"  # noqa: E501

        :param location: The location of this Provider.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def access_description(self):
        """Gets the access_description of this Provider.  # noqa: E501

        Description of the access for the account-setup e.g. UI-input-fields  # noqa: E501

        :return: The access_description of this Provider.  # noqa: E501
        :rtype: AccessDescription
        """
        return self._access_description

    @access_description.setter
    def access_description(self, access_description):
        """Sets the access_description of this Provider.

        Description of the access for the account-setup e.g. UI-input-fields  # noqa: E501

        :param access_description: The access_description of this Provider.  # noqa: E501
        :type: AccessDescription
        """

        self._access_description = access_description

    @property
    def supported(self):
        """Gets the supported of this Provider.  # noqa: E501

        Whether this bank is supported by AHOI-API, i.e. whether you can use a connection of this provider.  # noqa: E501

        :return: The supported of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this Provider.

        Whether this bank is supported by AHOI-API, i.e. whether you can use a connection of this provider.  # noqa: E501

        :param supported: The supported of this Provider.  # noqa: E501
        :type: bool
        """
        if supported is None:
            raise ValueError("Invalid value for `supported`, must not be `None`")  # noqa: E501

        self._supported = supported

    @property
    def type(self):
        """Gets the type of this Provider.  # noqa: E501

        Discriminator for subtypes. At the moment only `BankProvider` is supported.  # noqa: E501

        :return: The type of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Provider.

        Discriminator for subtypes. At the moment only `BankProvider` is supported.  # noqa: E501

        :param type: The type of this Provider.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Provider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
