# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.amount import Amount  # noqa: F401,E501


class MonthlySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'month': 'str',
        'account_id': 'str',
        'income': 'Amount',
        'outgoings': 'Amount',
        'balance': 'Amount'
    }

    attribute_map = {
        'id': 'id',
        'month': 'month',
        'account_id': 'accountId',
        'income': 'income',
        'outgoings': 'outgoings',
        'balance': 'balance'
    }

    def __init__(self, id=None, month=None, account_id=None, income=None, outgoings=None, balance=None):  # noqa: E501
        """MonthlySummary - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._month = None
        self._account_id = None
        self._income = None
        self._outgoings = None
        self._balance = None
        self.discriminator = None

        self.id = id
        self.month = month
        self.account_id = account_id
        self.income = income
        self.outgoings = outgoings
        self.balance = balance

    @property
    def id(self):
        """Gets the id of this MonthlySummary.  # noqa: E501

        MonthlySummary id in UUID form  # noqa: E501

        :return: The id of this MonthlySummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MonthlySummary.

        MonthlySummary id in UUID form  # noqa: E501

        :param id: The id of this MonthlySummary.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def month(self):
        """Gets the month of this MonthlySummary.  # noqa: E501

        The month this entry belongs to (year-month in the ISO-8601: \"yyyy-MM\")  # noqa: E501

        :return: The month of this MonthlySummary.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this MonthlySummary.

        The month this entry belongs to (year-month in the ISO-8601: \"yyyy-MM\")  # noqa: E501

        :param month: The month of this MonthlySummary.  # noqa: E501
        :type: str
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def account_id(self):
        """Gets the account_id of this MonthlySummary.  # noqa: E501

        Id of account this entry belongs to  # noqa: E501

        :return: The account_id of this MonthlySummary.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MonthlySummary.

        Id of account this entry belongs to  # noqa: E501

        :param account_id: The account_id of this MonthlySummary.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def income(self):
        """Gets the income of this MonthlySummary.  # noqa: E501

        Sum of all incoming transactions for this month  # noqa: E501

        :return: The income of this MonthlySummary.  # noqa: E501
        :rtype: Amount
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this MonthlySummary.

        Sum of all incoming transactions for this month  # noqa: E501

        :param income: The income of this MonthlySummary.  # noqa: E501
        :type: Amount
        """
        if income is None:
            raise ValueError("Invalid value for `income`, must not be `None`")  # noqa: E501

        self._income = income

    @property
    def outgoings(self):
        """Gets the outgoings of this MonthlySummary.  # noqa: E501

        Sum of all outgoing transactions for this month  # noqa: E501

        :return: The outgoings of this MonthlySummary.  # noqa: E501
        :rtype: Amount
        """
        return self._outgoings

    @outgoings.setter
    def outgoings(self, outgoings):
        """Sets the outgoings of this MonthlySummary.

        Sum of all outgoing transactions for this month  # noqa: E501

        :param outgoings: The outgoings of this MonthlySummary.  # noqa: E501
        :type: Amount
        """
        if outgoings is None:
            raise ValueError("Invalid value for `outgoings`, must not be `None`")  # noqa: E501

        self._outgoings = outgoings

    @property
    def balance(self):
        """Gets the balance of this MonthlySummary.  # noqa: E501

        Balance at end of month  # noqa: E501

        :return: The balance of this MonthlySummary.  # noqa: E501
        :rtype: Amount
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this MonthlySummary.

        Balance at end of month  # noqa: E501

        :param balance: The balance of this MonthlySummary.  # noqa: E501
        :type: Amount
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonthlySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
