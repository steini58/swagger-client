# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.self_described_value import SelfDescribedValue  # noqa: F401,E501


class RegistrationPublicKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_id': 'str',
        'valid_until': 'str',
        'public_key': 'SelfDescribedValue',
        'public_key_signature': 'SelfDescribedValue'
    }

    attribute_map = {
        'key_id': 'keyId',
        'valid_until': 'validUntil',
        'public_key': 'publicKey',
        'public_key_signature': 'publicKeySignature'
    }

    def __init__(self, key_id=None, valid_until=None, public_key=None, public_key_signature=None):  # noqa: E501
        """RegistrationPublicKey - a model defined in Swagger"""  # noqa: E501

        self._key_id = None
        self._valid_until = None
        self._public_key = None
        self._public_key_signature = None
        self.discriminator = None

        self.key_id = key_id
        self.valid_until = valid_until
        self.public_key = public_key
        self.public_key_signature = public_key_signature

    @property
    def key_id(self):
        """Gets the key_id of this RegistrationPublicKey.  # noqa: E501

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.keyId.description  # noqa: E501

        :return: The key_id of this RegistrationPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this RegistrationPublicKey.

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.keyId.description  # noqa: E501

        :param key_id: The key_id of this RegistrationPublicKey.  # noqa: E501
        :type: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")  # noqa: E501

        self._key_id = key_id

    @property
    def valid_until(self):
        """Gets the valid_until of this RegistrationPublicKey.  # noqa: E501

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.validUntil.description  # noqa: E501

        :return: The valid_until of this RegistrationPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this RegistrationPublicKey.

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.validUntil.description  # noqa: E501

        :param valid_until: The valid_until of this RegistrationPublicKey.  # noqa: E501
        :type: str
        """
        if valid_until is None:
            raise ValueError("Invalid value for `valid_until`, must not be `None`")  # noqa: E501

        self._valid_until = valid_until

    @property
    def public_key(self):
        """Gets the public_key of this RegistrationPublicKey.  # noqa: E501

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.publicKey.description  # noqa: E501

        :return: The public_key of this RegistrationPublicKey.  # noqa: E501
        :rtype: SelfDescribedValue
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this RegistrationPublicKey.

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.publicKey.description  # noqa: E501

        :param public_key: The public_key of this RegistrationPublicKey.  # noqa: E501
        :type: SelfDescribedValue
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def public_key_signature(self):
        """Gets the public_key_signature of this RegistrationPublicKey.  # noqa: E501

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.publicKeySignature.description  # noqa: E501

        :return: The public_key_signature of this RegistrationPublicKey.  # noqa: E501
        :rtype: SelfDescribedValue
        """
        return self._public_key_signature

    @public_key_signature.setter
    def public_key_signature(self, public_key_signature):
        """Sets the public_key_signature of this RegistrationPublicKey.

        api.dto.model.com-starfinanz-ahoi-dto-v2-RegistrationPublicKeyDto.properties.publicKeySignature.description  # noqa: E501

        :param public_key_signature: The public_key_signature of this RegistrationPublicKey.  # noqa: E501
        :type: SelfDescribedValue
        """
        if public_key_signature is None:
            raise ValueError("Invalid value for `public_key_signature`, must not be `None`")  # noqa: E501

        self._public_key_signature = public_key_signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationPublicKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
