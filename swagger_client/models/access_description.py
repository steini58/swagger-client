# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.input_field_description import InputFieldDescription  # noqa: F401,E501


class AccessDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'info_text': 'str',
        'field_descriptions': 'list[InputFieldDescription]'
    }

    attribute_map = {
        'info_text': 'infoText',
        'field_descriptions': 'fieldDescriptions'
    }

    def __init__(self, info_text=None, field_descriptions=None):  # noqa: E501
        """AccessDescription - a model defined in Swagger"""  # noqa: E501

        self._info_text = None
        self._field_descriptions = None
        self.discriminator = None

        if info_text is not None:
            self.info_text = info_text
        if field_descriptions is not None:
            self.field_descriptions = field_descriptions

    @property
    def info_text(self):
        """Gets the info_text of this AccessDescription.  # noqa: E501

        Information text by the provider as a description for required user actions during the account setup (e.g.,   \"Provided your financial institution has not given you a separate username, please enter  your account number as your username. Depending on your financial institution,  additional information such as a customer number can be entered. Most of the time  entering this information is optional.\")  # noqa: E501

        :return: The info_text of this AccessDescription.  # noqa: E501
        :rtype: str
        """
        return self._info_text

    @info_text.setter
    def info_text(self, info_text):
        """Sets the info_text of this AccessDescription.

        Information text by the provider as a description for required user actions during the account setup (e.g.,   \"Provided your financial institution has not given you a separate username, please enter  your account number as your username. Depending on your financial institution,  additional information such as a customer number can be entered. Most of the time  entering this information is optional.\")  # noqa: E501

        :param info_text: The info_text of this AccessDescription.  # noqa: E501
        :type: str
        """

        self._info_text = info_text

    @property
    def field_descriptions(self):
        """Gets the field_descriptions of this AccessDescription.  # noqa: E501

        Information to describe and facilitate validation of an access.  # noqa: E501

        :return: The field_descriptions of this AccessDescription.  # noqa: E501
        :rtype: list[InputFieldDescription]
        """
        return self._field_descriptions

    @field_descriptions.setter
    def field_descriptions(self, field_descriptions):
        """Sets the field_descriptions of this AccessDescription.

        Information to describe and facilitate validation of an access.  # noqa: E501

        :param field_descriptions: The field_descriptions of this AccessDescription.  # noqa: E501
        :type: list[InputFieldDescription]
        """

        self._field_descriptions = field_descriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
