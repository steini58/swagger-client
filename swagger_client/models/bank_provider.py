# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.access_description import AccessDescription  # noqa: F401,E501
from swagger_client.models.provider import Provider  # noqa: F401,E501


class BankProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_code': 'str',
        'bic': 'str'
    }

    attribute_map = {
        'bank_code': 'bankCode',
        'bic': 'bic'
    }

    def __init__(self, bank_code=None, bic=None):  # noqa: E501
        """BankProvider - a model defined in Swagger"""  # noqa: E501

        self._bank_code = None
        self._bic = None
        self.discriminator = None

        self.bank_code = bank_code
        self.bic = bic

    @property
    def bank_code(self):
        """Gets the bank_code of this BankProvider.  # noqa: E501

        Bank Code Number (BLZ, national 8 digits)  # noqa: E501

        :return: The bank_code of this BankProvider.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BankProvider.

        Bank Code Number (BLZ, national 8 digits)  # noqa: E501

        :param bank_code: The bank_code of this BankProvider.  # noqa: E501
        :type: str
        """
        if bank_code is None:
            raise ValueError("Invalid value for `bank_code`, must not be `None`")  # noqa: E501

        self._bank_code = bank_code

    @property
    def bic(self):
        """Gets the bic of this BankProvider.  # noqa: E501

        Business Identifier Code (defined in ISO-9362)  # noqa: E501

        :return: The bic of this BankProvider.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankProvider.

        Business Identifier Code (defined in ISO-9362)  # noqa: E501

        :param bic: The bic of this BankProvider.  # noqa: E501
        :type: str
        """
        if bic is None:
            raise ValueError("Invalid value for `bic`, must not be `None`")  # noqa: E501

        self._bic = bic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
