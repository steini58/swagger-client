# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NotificationTargetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_notification_target(self, target_id, **kwargs):  # noqa: E501
        """Delete notification target  # noqa: E501

        Delete a notification target identified by **targetId**. Also deletes associated notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_notification_target(target_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str target_id: The **targetId** to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_notification_target_with_http_info(target_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notification_target_with_http_info(target_id, **kwargs)  # noqa: E501
            return data

    def delete_notification_target_with_http_info(self, target_id, **kwargs):  # noqa: E501
        """Delete notification target  # noqa: E501

        Delete a notification target identified by **targetId**. Also deletes associated notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_notification_target_with_http_info(target_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str target_id: The **targetId** to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notification_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_id' is set
        if ('target_id' not in params or
                params['target_id'] is None):
            raise ValueError("Missing the required parameter `target_id` when calling `delete_notification_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_id' in params:
            path_params['targetId'] = params['target_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/notificationtargets/{targetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_target(self, target_id, **kwargs):  # noqa: E501
        """Get notification target  # noqa: E501

        Retrieve notification target identified by **targetId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_notification_target(target_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str target_id: The **targetId** to retrieve (required)
        :return: NotificationTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_notification_target_with_http_info(target_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_target_with_http_info(target_id, **kwargs)  # noqa: E501
            return data

    def get_notification_target_with_http_info(self, target_id, **kwargs):  # noqa: E501
        """Get notification target  # noqa: E501

        Retrieve notification target identified by **targetId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_notification_target_with_http_info(target_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str target_id: The **targetId** to retrieve (required)
        :return: NotificationTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_id' is set
        if ('target_id' not in params or
                params['target_id'] is None):
            raise ValueError("Missing the required parameter `target_id` when calling `get_notification_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_id' in params:
            path_params['targetId'] = params['target_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/notificationtargets/{targetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationTarget',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_targets(self, **kwargs):  # noqa: E501
        """List notification targets  # noqa: E501

        Retrieve all notification targets for the authenticated client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_notification_targets(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[NotificationTarget]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_notification_targets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_targets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_notification_targets_with_http_info(self, **kwargs):  # noqa: E501
        """List notification targets  # noqa: E501

        Retrieve all notification targets for the authenticated client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_notification_targets_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[NotificationTarget]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_targets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/notificationtargets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NotificationTarget]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_notification_target(self, notification_target_dto, **kwargs):  # noqa: E501
        """Create a new notification target  # noqa: E501

        Create a new notification target to receive configured notifications.  The two current supported systems are the Apple Push Notification service (APNs) for `IOS` devices and Google Cloud Messaging (GCM) for `ANDROID`, which must be supplied in **state**. The **appToken** must contain the unique identifier you receive after registering your device with the messaging services. The **locale** must comply to ISO 3166 language code. Currently only `de_DE` is supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_notification_target(notification_target_dto, async=True)
        >>> result = thread.get()

        :param async bool
        :param NotificationTarget notification_target_dto: The notification target to create (required)
        :return: NotificationTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_notification_target_with_http_info(notification_target_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.post_notification_target_with_http_info(notification_target_dto, **kwargs)  # noqa: E501
            return data

    def post_notification_target_with_http_info(self, notification_target_dto, **kwargs):  # noqa: E501
        """Create a new notification target  # noqa: E501

        Create a new notification target to receive configured notifications.  The two current supported systems are the Apple Push Notification service (APNs) for `IOS` devices and Google Cloud Messaging (GCM) for `ANDROID`, which must be supplied in **state**. The **appToken** must contain the unique identifier you receive after registering your device with the messaging services. The **locale** must comply to ISO 3166 language code. Currently only `de_DE` is supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_notification_target_with_http_info(notification_target_dto, async=True)
        >>> result = thread.get()

        :param async bool
        :param NotificationTarget notification_target_dto: The notification target to create (required)
        :return: NotificationTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_target_dto']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_notification_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_target_dto' is set
        if ('notification_target_dto' not in params or
                params['notification_target_dto'] is None):
            raise ValueError("Missing the required parameter `notification_target_dto` when calling `post_notification_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification_target_dto' in params:
            body_params = params['notification_target_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/notificationtargets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationTarget',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_notification_target(self, target_id, notification_target_dto, **kwargs):  # noqa: E501
        """Update notification target  # noqa: E501

        Update a notification target. Usually used to change the **appToken** since the messaging services alter those periodically. The **id** in **notificationDto** must match the **targetId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_notification_target(target_id, notification_target_dto, async=True)
        >>> result = thread.get()

        :param async bool
        :param str target_id: The **targetId** to update (required)
        :param NotificationTarget notification_target_dto: The notification target with updated token (required)
        :return: NotificationTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_notification_target_with_http_info(target_id, notification_target_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.put_notification_target_with_http_info(target_id, notification_target_dto, **kwargs)  # noqa: E501
            return data

    def put_notification_target_with_http_info(self, target_id, notification_target_dto, **kwargs):  # noqa: E501
        """Update notification target  # noqa: E501

        Update a notification target. Usually used to change the **appToken** since the messaging services alter those periodically. The **id** in **notificationDto** must match the **targetId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_notification_target_with_http_info(target_id, notification_target_dto, async=True)
        >>> result = thread.get()

        :param async bool
        :param str target_id: The **targetId** to update (required)
        :param NotificationTarget notification_target_dto: The notification target with updated token (required)
        :return: NotificationTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_id', 'notification_target_dto']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_notification_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_id' is set
        if ('target_id' not in params or
                params['target_id'] is None):
            raise ValueError("Missing the required parameter `target_id` when calling `put_notification_target`")  # noqa: E501
        # verify the required parameter 'notification_target_dto' is set
        if ('notification_target_dto' not in params or
                params['notification_target_dto'] is None):
            raise ValueError("Missing the required parameter `notification_target_dto` when calling `put_notification_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_id' in params:
            path_params['targetId'] = params['target_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification_target_dto' in params:
            body_params = params['notification_target_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/notificationtargets/{targetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationTarget',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
