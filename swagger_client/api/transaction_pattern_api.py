# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransactionPatternApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_transaction_pattern(self, access_id, account_id, pattern_id, activated, **kwargs):  # noqa: E501
        """Enable a transaction pattern  # noqa: E501

        Disabling the transaction pattern results in ignoring the pattern in the forecast. The transaction still exists and relations with transactions are not modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.activate_transaction_pattern(access_id, account_id, pattern_id, activated, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to activate the pattern (required)
        :param str account_id: The **accountId** for which to activate the pattern (required)
        :param str pattern_id: The **patternId** to (de)activate (required)
        :param bool activated: If `true`, the pattern will be used for forecast calculations;         `false` will be ignored (required)
        :return: TransactionPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.activate_transaction_pattern_with_http_info(access_id, account_id, pattern_id, activated, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_transaction_pattern_with_http_info(access_id, account_id, pattern_id, activated, **kwargs)  # noqa: E501
            return data

    def activate_transaction_pattern_with_http_info(self, access_id, account_id, pattern_id, activated, **kwargs):  # noqa: E501
        """Enable a transaction pattern  # noqa: E501

        Disabling the transaction pattern results in ignoring the pattern in the forecast. The transaction still exists and relations with transactions are not modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.activate_transaction_pattern_with_http_info(access_id, account_id, pattern_id, activated, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to activate the pattern (required)
        :param str account_id: The **accountId** for which to activate the pattern (required)
        :param str pattern_id: The **patternId** to (de)activate (required)
        :param bool activated: If `true`, the pattern will be used for forecast calculations;         `false` will be ignored (required)
        :return: TransactionPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id', 'pattern_id', 'activated']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_transaction_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `activate_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `activate_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'pattern_id' is set
        if ('pattern_id' not in params or
                params['pattern_id'] is None):
            raise ValueError("Missing the required parameter `pattern_id` when calling `activate_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'activated' is set
        if ('activated' not in params or
                params['activated'] is None):
            raise ValueError("Missing the required parameter `activated` when calling `activate_transaction_pattern`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'pattern_id' in params:
            path_params['patternId'] = params['pattern_id']  # noqa: E501
        if 'activated' in params:
            path_params['activated'] = params['activated']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/transactionpatterns/{patternId}/active/{activated}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionPattern',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_transaction_pattern(self, access_id, account_id, pattern_id, **kwargs):  # noqa: E501
        """Delete transaction pattern  # noqa: E501

        Delete the transaction pattern identified by the **patternId**. All associated transactions will be updated to {{patternId = null}}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_transaction_pattern(access_id, account_id, pattern_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the transaction pattern to delete (required)
        :param str account_id: The **accountId** for the transaction pattern to delete (required)
        :param str pattern_id: The **patternId** to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_transaction_pattern_with_http_info(access_id, account_id, pattern_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_transaction_pattern_with_http_info(access_id, account_id, pattern_id, **kwargs)  # noqa: E501
            return data

    def delete_transaction_pattern_with_http_info(self, access_id, account_id, pattern_id, **kwargs):  # noqa: E501
        """Delete transaction pattern  # noqa: E501

        Delete the transaction pattern identified by the **patternId**. All associated transactions will be updated to {{patternId = null}}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_transaction_pattern_with_http_info(access_id, account_id, pattern_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the transaction pattern to delete (required)
        :param str account_id: The **accountId** for the transaction pattern to delete (required)
        :param str pattern_id: The **patternId** to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id', 'pattern_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_transaction_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `delete_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'pattern_id' is set
        if ('pattern_id' not in params or
                params['pattern_id'] is None):
            raise ValueError("Missing the required parameter `pattern_id` when calling `delete_transaction_pattern`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'pattern_id' in params:
            path_params['patternId'] = params['pattern_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/transactionpatterns/{patternId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_pattern(self, access_id, account_id, pattern_id, **kwargs):  # noqa: E501
        """Get transaction pattern  # noqa: E501

        Returns the transaction pattern identified by **patternId** in relationship with  **accountId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_pattern(access_id, account_id, pattern_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the pattern to retrieve (required)
        :param str account_id: The **accoundId** for the pattern to retrieve (required)
        :param str pattern_id: The **patternId** for the pattern to retrieve (required)
        :return: TransactionPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_pattern_with_http_info(access_id, account_id, pattern_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_pattern_with_http_info(access_id, account_id, pattern_id, **kwargs)  # noqa: E501
            return data

    def get_transaction_pattern_with_http_info(self, access_id, account_id, pattern_id, **kwargs):  # noqa: E501
        """Get transaction pattern  # noqa: E501

        Returns the transaction pattern identified by **patternId** in relationship with  **accountId**.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_pattern_with_http_info(access_id, account_id, pattern_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the pattern to retrieve (required)
        :param str account_id: The **accoundId** for the pattern to retrieve (required)
        :param str pattern_id: The **patternId** for the pattern to retrieve (required)
        :return: TransactionPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id', 'pattern_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'pattern_id' is set
        if ('pattern_id' not in params or
                params['pattern_id'] is None):
            raise ValueError("Missing the required parameter `pattern_id` when calling `get_transaction_pattern`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'pattern_id' in params:
            path_params['patternId'] = params['pattern_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/transactionpatterns/{patternId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionPattern',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transaction_patterns(self, access_id, account_id, **kwargs):  # noqa: E501
        """List transaction patterns for account  # noqa: E501

        Returns all transaction pattern for **accountId**. Transaction patterns are recurring transactions automatically identified by the server or manually created via [create transaction pattern](#!/Transaction_pattern/postTransactionPattern).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transaction_patterns(access_id, account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve transaction patterns (required)
        :param str account_id: The **accountId** for which to retrieve transaction patterns (required)
        :return: list[TransactionPattern]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_transaction_patterns_with_http_info(access_id, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_transaction_patterns_with_http_info(access_id, account_id, **kwargs)  # noqa: E501
            return data

    def list_transaction_patterns_with_http_info(self, access_id, account_id, **kwargs):  # noqa: E501
        """List transaction patterns for account  # noqa: E501

        Returns all transaction pattern for **accountId**. Transaction patterns are recurring transactions automatically identified by the server or manually created via [create transaction pattern](#!/Transaction_pattern/postTransactionPattern).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transaction_patterns_with_http_info(access_id, account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve transaction patterns (required)
        :param str account_id: The **accountId** for which to retrieve transaction patterns (required)
        :return: list[TransactionPattern]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transaction_patterns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `list_transaction_patterns`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_transaction_patterns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/transactionpatterns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransactionPattern]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_transaction_pattern(self, access_id, account_id, transaction_pattern_dto, **kwargs):  # noqa: E501
        """Create a new pattern  # noqa: E501

        Create a new pattern for an **accountId**. The **cycle** can be one of `MONTHLY`, `QUARTERLY`, `SEMI_ANNUALLY` or `ANNUALLY`. The **day** can be between `1` and `366`, depending on **cycle**:  | cycle | day range | example | | --- | --- | --- | | `MONTHLY` | `1`-`31`  | every 29th of the month => `29` | | `QUARTERLY` | `1`-`92`  | 23rd of February (23rd of May, etc.) => `54` (31 [complete first month] + 23 [days in second month]) | | `SEMI_ANNUALLY` | `1`-`184` | 1st of May and 1st of November => `121` (for first half of year: 31 + 28 + 31 + 30 + 1) | | `ANNUALLY` | `1`-`366` | 24th of December => `358` |  If a similar pattern already exists, you will receive an HTTP status code 409.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_transaction_pattern(access_id, account_id, transaction_pattern_dto, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** to which the new created pattern is associated with (required)
        :param str account_id: The **accountId** to which the new created pattern is associated with (required)
        :param TransactionPattern transaction_pattern_dto: The transaction pattern to create (required)
        :return: TransactionPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_transaction_pattern_with_http_info(access_id, account_id, transaction_pattern_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.post_transaction_pattern_with_http_info(access_id, account_id, transaction_pattern_dto, **kwargs)  # noqa: E501
            return data

    def post_transaction_pattern_with_http_info(self, access_id, account_id, transaction_pattern_dto, **kwargs):  # noqa: E501
        """Create a new pattern  # noqa: E501

        Create a new pattern for an **accountId**. The **cycle** can be one of `MONTHLY`, `QUARTERLY`, `SEMI_ANNUALLY` or `ANNUALLY`. The **day** can be between `1` and `366`, depending on **cycle**:  | cycle | day range | example | | --- | --- | --- | | `MONTHLY` | `1`-`31`  | every 29th of the month => `29` | | `QUARTERLY` | `1`-`92`  | 23rd of February (23rd of May, etc.) => `54` (31 [complete first month] + 23 [days in second month]) | | `SEMI_ANNUALLY` | `1`-`184` | 1st of May and 1st of November => `121` (for first half of year: 31 + 28 + 31 + 30 + 1) | | `ANNUALLY` | `1`-`366` | 24th of December => `358` |  If a similar pattern already exists, you will receive an HTTP status code 409.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_transaction_pattern_with_http_info(access_id, account_id, transaction_pattern_dto, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** to which the new created pattern is associated with (required)
        :param str account_id: The **accountId** to which the new created pattern is associated with (required)
        :param TransactionPattern transaction_pattern_dto: The transaction pattern to create (required)
        :return: TransactionPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id', 'transaction_pattern_dto']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_transaction_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `post_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `post_transaction_pattern`")  # noqa: E501
        # verify the required parameter 'transaction_pattern_dto' is set
        if ('transaction_pattern_dto' not in params or
                params['transaction_pattern_dto'] is None):
            raise ValueError("Missing the required parameter `transaction_pattern_dto` when calling `post_transaction_pattern`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction_pattern_dto' in params:
            body_params = params['transaction_pattern_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/transactionpatterns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionPattern',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
