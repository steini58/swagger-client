# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TransferApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_authorization(self, access_id, account_id, task_id, transfer_challenge_response, **kwargs):  # noqa: E501
        """Create a transfer authorization  # noqa: E501

        **Please note:** Exception from the norm. This POST request will not return  the two header fields X-Id and Location. The returned JSON document  represents the transfer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_authorization(access_id, account_id, task_id, transfer_challenge_response, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the triggered authorization (required)
        :param str account_id: The **account** for the triggered authorization (required)
        :param str task_id: The **taskId** given in the TransferChallenge (required)
        :param TransferChallengeResponse transfer_challenge_response: The *TransferChallengeResponse* object to authorize the transfer (required)
        :return: TransferTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_authorization_with_http_info(access_id, account_id, task_id, transfer_challenge_response, **kwargs)  # noqa: E501
        else:
            (data) = self.post_authorization_with_http_info(access_id, account_id, task_id, transfer_challenge_response, **kwargs)  # noqa: E501
            return data

    def post_authorization_with_http_info(self, access_id, account_id, task_id, transfer_challenge_response, **kwargs):  # noqa: E501
        """Create a transfer authorization  # noqa: E501

        **Please note:** Exception from the norm. This POST request will not return  the two header fields X-Id and Location. The returned JSON document  represents the transfer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_authorization_with_http_info(access_id, account_id, task_id, transfer_challenge_response, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the triggered authorization (required)
        :param str account_id: The **account** for the triggered authorization (required)
        :param str task_id: The **taskId** given in the TransferChallenge (required)
        :param TransferChallengeResponse transfer_challenge_response: The *TransferChallengeResponse* object to authorize the transfer (required)
        :return: TransferTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id', 'task_id', 'transfer_challenge_response']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `post_authorization`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `post_authorization`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `post_authorization`")  # noqa: E501
        # verify the required parameter 'transfer_challenge_response' is set
        if ('transfer_challenge_response' not in params or
                params['transfer_challenge_response'] is None):
            raise ValueError("Missing the required parameter `transfer_challenge_response` when calling `post_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transfer_challenge_response' in params:
            body_params = params['transfer_challenge_response']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/transfers/{taskId}/authorize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferTask',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_transfer(self, access_id, account_id, transfer, **kwargs):  # noqa: E501
        """Create a new transfer  # noqa: E501

        The transfer represents a money  transfer from the account identified by its ID to another bank account.   **Please note:** Exception from the norm. This POST request will not return  the two header fields X-Id and Location. Also, the returned JSON document  does not represent the transfer entity but rather a temporary placeholder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_transfer(access_id, account_id, transfer, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the transfer (required)
        :param str account_id: The **accountId** for the transfer (required)
        :param Transfer transfer: The *Transfer* object to initiate a transfer (required)
        :return: TransferChallenge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_transfer_with_http_info(access_id, account_id, transfer, **kwargs)  # noqa: E501
        else:
            (data) = self.post_transfer_with_http_info(access_id, account_id, transfer, **kwargs)  # noqa: E501
            return data

    def post_transfer_with_http_info(self, access_id, account_id, transfer, **kwargs):  # noqa: E501
        """Create a new transfer  # noqa: E501

        The transfer represents a money  transfer from the account identified by its ID to another bank account.   **Please note:** Exception from the norm. This POST request will not return  the two header fields X-Id and Location. Also, the returned JSON document  does not represent the transfer entity but rather a temporary placeholder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_transfer_with_http_info(access_id, account_id, transfer, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the transfer (required)
        :param str account_id: The **accountId** for the transfer (required)
        :param Transfer transfer: The *Transfer* object to initiate a transfer (required)
        :return: TransferChallenge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id', 'transfer']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `post_transfer`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `post_transfer`")  # noqa: E501
        # verify the required parameter 'transfer' is set
        if ('transfer' not in params or
                params['transfer'] is None):
            raise ValueError("Missing the required parameter `transfer` when calling `post_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transfer' in params:
            body_params = params['transfer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferChallenge',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
