# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ForecastApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_forecast(self, access_id, account_id, **kwargs):  # noqa: E501
        """Get balance forecast  # noqa: E501

        The current month is determined by the latest refresh.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_forecast(access_id, account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve forecasts (required)
        :param str account_id: The **accountId** for which to retrieve forecasts (required)
        :return: Forecast
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_forecast_with_http_info(access_id, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_with_http_info(access_id, account_id, **kwargs)  # noqa: E501
            return data

    def get_forecast_with_http_info(self, access_id, account_id, **kwargs):  # noqa: E501
        """Get balance forecast  # noqa: E501

        The current month is determined by the latest refresh.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_forecast_with_http_info(access_id, account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve forecasts (required)
        :param str account_id: The **accountId** for which to retrieve forecasts (required)
        :return: Forecast
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_forecast`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_forecast`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/forecast', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Forecast',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_forecast_transactions(self, access_id, account_id, **kwargs):  # noqa: E501
        """Retrieve balance forecast for the end of the current month.  # noqa: E501

        The current  month is determined by latest refresh of transactions. The request  also retrieves the transactions expected to be applied until the  end of the current month.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_forecast_transactions(access_id, account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the forecast. (required)
        :param str account_id: The **id** for the account. (required)
        :return: ForecastTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_forecast_transactions_with_http_info(access_id, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_forecast_transactions_with_http_info(access_id, account_id, **kwargs)  # noqa: E501
            return data

    def get_forecast_transactions_with_http_info(self, access_id, account_id, **kwargs):  # noqa: E501
        """Retrieve balance forecast for the end of the current month.  # noqa: E501

        The current  month is determined by latest refresh of transactions. The request  also retrieves the transactions expected to be applied until the  end of the current month.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_forecast_transactions_with_http_info(access_id, account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for the forecast. (required)
        :param str account_id: The **id** for the account. (required)
        :return: ForecastTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'account_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_forecast_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_forecast_transactions`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_forecast_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/accounts/{accountId}/forecast/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ForecastTransaction',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
