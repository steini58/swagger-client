# coding: utf-8

"""
    

    [AHOI cookbook](/ahoi/docs/cookbook/index.html)  [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2016&dash;2017 Starfinanz - Ein Unternehmen der Finanz Informatik  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TANSchemesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_current_tan_media(self, access_id, **kwargs):  # noqa: E501
        """Get current TAN media.  # noqa: E501

        Returns the currently selected TAN media for the access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_current_tan_media(access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve the current TAN media. (required)
        :return: TanMedia
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_current_tan_media_with_http_info(access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_tan_media_with_http_info(access_id, **kwargs)  # noqa: E501
            return data

    def get_current_tan_media_with_http_info(self, access_id, **kwargs):  # noqa: E501
        """Get current TAN media.  # noqa: E501

        Returns the currently selected TAN media for the access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_current_tan_media_with_http_info(access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve the current TAN media. (required)
        :return: TanMedia
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_tan_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_current_tan_media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/currenttanmedia', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TanMedia',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_tan_scheme(self, access_id, **kwargs):  # noqa: E501
        """Get current TAN scheme.  # noqa: E501

        Returns the currently selected TAN scheme for the access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_current_tan_scheme(access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve the current TAN scheme. (required)
        :return: TanScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_current_tan_scheme_with_http_info(access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_tan_scheme_with_http_info(access_id, **kwargs)  # noqa: E501
            return data

    def get_current_tan_scheme_with_http_info(self, access_id, **kwargs):  # noqa: E501
        """Get current TAN scheme.  # noqa: E501

        Returns the currently selected TAN scheme for the access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_current_tan_scheme_with_http_info(access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to retrieve the current TAN scheme. (required)
        :return: TanScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_tan_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_current_tan_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/currenttanscheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TanScheme',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tan_schemes(self, access_id, **kwargs):  # noqa: E501
        """List TAN schemes for access  # noqa: E501

        Retrieves all available TAN schemes for access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tan_schemes(access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **id** for the access for which to retrieve the TAN list (required)
        :param int max_age: Optional - in seconds - indicates the maximum acceptable         timeframe since the last refresh of the tan scheme list.
        :return: list[TanScheme]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tan_schemes_with_http_info(access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tan_schemes_with_http_info(access_id, **kwargs)  # noqa: E501
            return data

    def get_tan_schemes_with_http_info(self, access_id, **kwargs):  # noqa: E501
        """List TAN schemes for access  # noqa: E501

        Retrieves all available TAN schemes for access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tan_schemes_with_http_info(access_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **id** for the access for which to retrieve the TAN list (required)
        :param int max_age: Optional - in seconds - indicates the maximum acceptable         timeframe since the last refresh of the tan scheme list.
        :return: list[TanScheme]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'max_age']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tan_schemes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `get_tan_schemes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501

        query_params = []
        if 'max_age' in params:
            query_params.append(('max-age', params['max_age']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/tanschemes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TanScheme]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_current_tan_media(self, access_id, tan_media_id, **kwargs):  # noqa: E501
        """Update current TAN media.  # noqa: E501

        Update the access with a new currentTanMedia.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_current_tan_media(access_id, tan_media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to set the current TAN media. (required)
        :param str tan_media_id: The **id** for the TAN media that should be set as the new currentTanMedia. (required)
        :return: Access
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_current_tan_media_with_http_info(access_id, tan_media_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_current_tan_media_with_http_info(access_id, tan_media_id, **kwargs)  # noqa: E501
            return data

    def put_current_tan_media_with_http_info(self, access_id, tan_media_id, **kwargs):  # noqa: E501
        """Update current TAN media.  # noqa: E501

        Update the access with a new currentTanMedia.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_current_tan_media_with_http_info(access_id, tan_media_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to set the current TAN media. (required)
        :param str tan_media_id: The **id** for the TAN media that should be set as the new currentTanMedia. (required)
        :return: Access
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'tan_media_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_current_tan_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `put_current_tan_media`")  # noqa: E501
        # verify the required parameter 'tan_media_id' is set
        if ('tan_media_id' not in params or
                params['tan_media_id'] is None):
            raise ValueError("Missing the required parameter `tan_media_id` when calling `put_current_tan_media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'tan_media_id' in params:
            path_params['tanMediaId'] = params['tan_media_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/currenttanmedia/{tanMediaId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Access',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_current_tan_scheme(self, access_id, tan_scheme_id, **kwargs):  # noqa: E501
        """Update current TAN scheme.  # noqa: E501

        Update the access with a new currentTanScheme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_current_tan_scheme(access_id, tan_scheme_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to set the current TAN scheme. (required)
        :param str tan_scheme_id: The **id** for the TAN scheme that should be set as the new currentTanScheme. (required)
        :return: Access
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_current_tan_scheme_with_http_info(access_id, tan_scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_current_tan_scheme_with_http_info(access_id, tan_scheme_id, **kwargs)  # noqa: E501
            return data

    def put_current_tan_scheme_with_http_info(self, access_id, tan_scheme_id, **kwargs):  # noqa: E501
        """Update current TAN scheme.  # noqa: E501

        Update the access with a new currentTanScheme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_current_tan_scheme_with_http_info(access_id, tan_scheme_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str access_id: The **accessId** for which to set the current TAN scheme. (required)
        :param str tan_scheme_id: The **id** for the TAN scheme that should be set as the new currentTanScheme. (required)
        :return: Access
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_id', 'tan_scheme_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_current_tan_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_id' is set
        if ('access_id' not in params or
                params['access_id'] is None):
            raise ValueError("Missing the required parameter `access_id` when calling `put_current_tan_scheme`")  # noqa: E501
        # verify the required parameter 'tan_scheme_id' is set
        if ('tan_scheme_id' not in params or
                params['tan_scheme_id'] is None):
            raise ValueError("Missing the required parameter `tan_scheme_id` when calling `put_current_tan_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'access_id' in params:
            path_params['accessId'] = params['access_id']  # noqa: E501
        if 'tan_scheme_id' in params:
            path_params['tanSchemeId'] = params['tan_scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accesses/{accessId}/currenttanscheme/{tanSchemeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Access',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
